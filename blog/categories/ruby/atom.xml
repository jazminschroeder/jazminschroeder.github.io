<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | JazminSchroeder.github.io]]></title>
  <link href="http://jazminschroeder.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://jazminschroeder.github.io/"/>
  <updated>2014-03-04T22:44:26-06:00</updated>
  <id>http://jazminschroeder.github.io/</id>
  <author>
    <name><![CDATA[Jazmin Schroeder]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RubyProf: Identify your pain points]]></title>
    <link href="http://jazminschroeder.github.io/blog/2013/12/25/profiling-identify-your-pain-points/"/>
    <updated>2013-12-25T17:28:16-06:00</updated>
    <id>http://jazminschroeder.github.io/blog/2013/12/25/profiling-identify-your-pain-points</id>
    <content type="html"><![CDATA[<p>We all have been there: the site worked great in development but not so great in Production. Time to optimize! but&hellip; How to know what to optimize?</p>

<p><a href="https://github.com/ruby-prof/ruby-prof" target="_blank">RubyProf</a> is a fast code profiler for Ruby which helps you find pain points in your code by providing different measure parameters including call times, memory usage and object applications.</p>

<!-- more -->




<h3>Show me the code!</h3>


<p><div>
  <pre><code class='ruby'>require &amp;lsquo;ruby-prof&amp;rsquo;
RubyProf.start&lt;/p&gt;

&lt;p&gt;1.upto(100) do |number|
  if number % 5 == 0&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;p 'Divider'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;  else&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;p number
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;  end
end&lt;/p&gt;

&lt;p&gt;result = RubyProf.stop
printer = RubyProf::MultiPrinter.new(result)
printer.print(:path =&gt; &amp;ldquo;.&amp;rdquo;, :profile =&gt; &amp;ldquo;profile&amp;rdquo;)</code></pre>
</div>
</p>

<p>Now take a pic at the profile flat report.</p>

<p><div>
  <pre><code class='txt'>Thread ID: 70113135123160
Fiber ID: 70113151681380
Total: 0.000937
Sort by: self_time&lt;/p&gt;

&lt;p&gt; %self      total      self      wait     child     calls  name
 41.73      0.001     0.000     0.000     0.000      100   Kernel#p
 24.87      0.001     0.000     0.000     0.001        1   Integer#upto
 10.99      0.000     0.000     0.000     0.000       80   Kernel#inspect
 10.46      0.001     0.000     0.000     0.001        1   Global#[No method]
 7.90      0.000     0.000     0.000     0.000       80   Fixnum#to_s
 4.06      0.000     0.000     0.000     0.000       20   String#inspect&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     * indicates recursively called methods
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;</code></pre>
</div>
</p>

<p><img class="left" src="/images/call_tree.png" width="350" height="350" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" >
<img class="right" src="/images/profile_graph.png" width="350" height="350" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>
]]></content>
  </entry>
  
</feed>
